#include <iostream>
#include <vector>
//#include <list>
#include <set>
#include <map>
#include <cstdlib>

#include <assert.h>

#include <vgl/vgl_point_3d.h>
#include <vgl/vgl_distance.h>

#include <Geometry/Geometry.h>

#include <Tools/Tools.h>

#include "Cluster.h"
#include "Clustering.h"

using namespace std;

vector<Cluster> KMeans(const vector<OrientedPoint> &Points, const double k)
{
	vector<Cluster> Clusters(k);

	//pick k random cluster centers between min and max
	double MIN = -5.0;
	double MAX = 5.0;
	vector<vgl_point_3d<double> > Centroids(k);
	
	for(unsigned int i = 0; i < k; i++)
	{
		Centroids[i] = vgl_point_3d<double> (Tools::RandomDouble(MIN, MAX), Tools::RandomDouble(MIN, MAX), Tools::RandomDouble(MIN, MAX));
	}

	cout << "Initial cluster centers:" << endl;
	Tools::OutputVector(Centroids);

	for(unsigned int point = 0; point < Points.size(); point++)
	{
		//Clusters[cluster].clear();
		//unsigned int ClosestCentroid = ClosestPointIndex(Points[point].getCoord(), Centroids);
		//Clusters.push_back(Points[point]);
	}
	
	return Clusters;
}

list<Cluster> AgglomerativeCluster(const vector<OrientedPoint> &Points, const double MaxDist)
{
	//create a cluster for each point
	list<Cluster> Clusters;
	
	for(unsigned int i = 0; i < Points.size(); i++)
	{
		vector<OrientedPoint> P(1, Points[i]);
		Clusters.push_back(Cluster(P));
		
	}

	while(CombineClosestClusters(Clusters, MaxDist))
	{
		cout << "There are " << Clusters.size() << " clusters." << endl;
	}

	return Clusters;
}


typedef list<Cluster>::iterator CLIterator;
typedef pair<CLIterator, CLIterator> CLIpair;
//typedef list<Cluster>::const_iterator ConstCLIterator;
//typedef pair<ConstCLIterator, ConstCLIterator> ConstCLIpair;

bool operator< (const CLIpair &C1, const CLIpair &C2)
{
	if(vgl_distance(C1.first->getCenter(), C1.second->getCenter())  < vgl_distance(C2.first->getCenter(), C2.second->getCenter()))
		return true;
	else
		return false;
}

bool CombineClosestClusters(list<Cluster> &Clusters, const double MaxDist)
{
	cout << "There are " << Clusters.size() << " clusters." << endl;
	
	multiset<CLIpair> Distances;
	
	for(CLIterator it1 = Clusters.begin(); it1 != Clusters.end(); it1++)
	{
		for(CLIterator it2 = ++CLIterator(it1); it2 != Clusters.end(); it2++)
		{
			/*
			cout << "adding..." << endl;
			cout << *it1 << endl;
			cout << *it2 << endl;
			*/
			Distances.insert(CLIpair(it1, it2));
		}
	}
	
	cout << "There are " << Distances.size() << " distances." << endl;

	cout << endl << "CombineClosestClusters" << endl << "--------------" << endl;
	CLIpair Closest = *Distances.begin(); //the "smallest" element, sorted by the distance between the clusters

	//cout << Closest.first->getCenter() << endl;
	//cout << Closest.second->getCenter() << endl;
	
	//cout << *Closest.first << endl;
	//cout << *Closest.second << endl;
	
	
	for(multiset<CLIpair>::iterator it = Distances.begin(); it != Distances.end(); it++)
	{
		
		double dist = vgl_distance(it->first->getCenter(), it->second->getCenter());
		cout << "Dist: " << dist << endl;
	}
	
	double ClosestDistance = vgl_distance(Closest.first->getCenter(), Closest.second->getCenter());
	cout << "Closest Distance: " << ClosestDistance << endl;
	if(ClosestDistance < MaxDist)
	{
		cout << "Combining..." << endl;
		Closest.first->AppendCluster(*Closest.second);
		Clusters.erase(Closest.second);
		cout << "Combined!" << endl;
		return true;
	}
	else
	{
		cout << "Could not combine!" << endl;
		cout << "Closest Distance: " << ClosestDistance << endl;
		cout << "Closest Cluster 1: " << Closest.first->getCenter() << endl;
		cout << "Closest Cluster 2: " << Closest.second->getCenter() << endl;
		return false;
	}
}